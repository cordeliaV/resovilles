# -*- coding: utf-8 -*-
"""
Created on Sun Jul 21 16:53:54 2019
@author: Baptiste CORDHOMME
Algorithme d'extraction des fichiers GTFS permettant, après un traitement externe avec QGIS (matrice des distances), d'obtenir les niveaux de PTAL d'un territoire
"""

#%% INITIALISATION print(" ----- ") import datetime import time
from os import path as os_path
repertoire = os_path.abspath(os_path.split(__file__)[0])  #retourne le répertoire dans lequel est le script
repertoire_GTFS = repertoire + "/Data brute/gtfs/" 
repertoire_data_modifiee = repertoire + "/Data modifiée/" 
repertoire_sorties = repertoire + "/Résultats/"
print("PHASE D'INTIALISATION")

#Demandes de calculs
projets_calcules=[]
proj=input("Quel projet voulez-vous ajouter au calcul ?"+'\n') 
while proj != 'aucun' :
    if len(projets_calcules) > 0 :
        test_mod=input("Même mode que précedemment ? (o/n)"+'\n') 
        if test_mod == 'n' :
            mod=input("Quel(s) mode(s) souhaitez-vous calculer pour ce projet (sep=',')?"+"\n")
            modes=mod.split(',')
        test_freq=input("Même fréquence que précedemment ? (o/n)"+'\n') 
        if test_freq == 'n' :
            freq=input("Avec quelle(s) fréquence(s) (sep=',') ? "+"\n")
            frequences=freq.split(',') 
    else :
        mod=input("Quel(s) mode(s) souhaitez-vous calculer pour ce projet (sep=',') ?"+"\n") 
        modes=mod.split(',')
        freq=input("Avec quelle(s) fréquence(s) (sep=',') ? "+"\n") 
        frequences=freq.split(',')
    if len(modes) != len(frequences) :
        print("Chaque mode n'est pas associé à une fréquence, veuillez recommencer la saisie")
    else :
        for mode in modes :
            index=modes.index(mode) 
            frequence=float(frequences[index]) 
            projet=[mode,proj,frequence] 
            projets_calcules.append(projet)
    proj=input("Quel projet voulez-vous ajouter au calcul ? "+"\n") 
    print(" ----- ")
    
debut_calcul = time.time()

dateref=20220301 #Le mardi 03 mars 2022

def durée(start,end,date=dateref) : 
    date=str(date)
    year=int(date[:4]) 
    month=int(date[4:6]) 
    day=int(date[6:])
    for heure in [start,end] :
        elems=heure.split(':') 
        hour=int(elems[0]) 
        minute=int(elems[1]) 
        second=int(elems[2]) 
        if heure == start :
            depart = datetime.datetime(year,month,day,hour,minute,second) 
        elif heure == end :
            arrivee = datetime.datetime(year,month,day,hour,minute,second)

delta = arrivee - depart 
return delta

#%% EXTRACTION DES GTFS
print("PHASE D'EXTRACTION DES GTFS")
print("La date de référence choisie est le : "+str(dateref))

services_dateref=set()
with open(repertoire_GTFS+"calendar_dates.txt") as calendar_dates :
    next(calendar_dates)
    for ligne in calendar_dates :
        data=ligne.strip().split(',') 
        service_id=data[0] 
        date=int(data[1]) 
        exception_type=int(data[2])
        
        #Si le service a été ajouté à la date de référence 
        if exception_type == 1 and date == dateref :
            services_dateref.add(service_id)
            
routes_id_to_names={}
routes_id_to_types={}
with open(repertoire_GTFS+"routes.txt") as routes :
    next(routes)
    for ligne in routes :
        data=ligne.strip().split(',')
        route_id=data[0]
        route_short_name=data[2]
        route_long_name=data[3] 
        routes_id_to_names[route_id]=[route_short_name,route_long_name] 
        route_type=data[5]
        routes_id_to_types[route_id]=route_type

routes_dateref=set()
trips_dateref=set()
trips_to_routes={}
with open(repertoire_GTFS+"trips.txt") as trips :
    next(trips)
    for ligne in trips :
        data=ligne.strip().split(',') 
        route_id=data[0] 
        service_id=data[1] 
        trip_id=data[2]
        trip_headsign=data[3] 
        direction=int(data[5])
        
        #On crée un dico de correspondance entre missions et routes 
        route_type=routes_id_to_types[route_id] 
        trips_to_routes[trip_id]=[route_id,direction,route_type,trip_headsign]

        #Si le service est présent à la date de référence 
        if service_id in services_dateref :
            trips_dateref.add(trip_id)
            if route_id not in routes_dateref :
                routes_dateref.add(route_id)
                
heures_depart_routes={}
stops_to_routes={}
with open(repertoire_GTFS+"stop_times.txt") as stop_times :
    next(stop_times)
    for ligne in stop_times :
        data=ligne.strip().split(',') 
        trip_id=data[0] 
        departure_time=data[2] 
        stop_id=data[3] 
        stop_sequence=int(data[4])

        route=trips_to_routes[trip_id] 
        route_id=route[0]
        direction=route[1] 
        route=str(route_id)+','+str(direction)

        if stop_id not in stops_to_routes : 
            stops_to_routes[stop_id]=[route]
        elif stop_id in stops_to_routes : 
            routes=stops_to_routes[stop_id] 
            if route not in routes :
                stops_to_routes[stop_id].append(route)

        if trip_id in trips_dateref :
            if stop_sequence <= 1 : #1er arrêt de la chaîne

                if route not in heures_depart_routes : 
                    heures_depart_routes[route]=[departure_time]
                elif route in heures_depart_routes : 
                    heures_depart_routes[route].append(departure_time)
                    
sortie_frequence = open(repertoire_sorties+'routes_to_frequence.csv','w') 
sortie_frequence.write("route_id;sens;frequence"+'\n')
route_to_freq={}
for route in heures_depart_routes :
    route_id=route[0]
    direction=route[1]
    intervalles=[]
    heure_prec="00:00:00" 
    liste_horaires=sorted(heures_depart_routes[route])
    if len(liste_horaires) >= 2 : #Plusieurs missions par jour
        for heure in liste_horaires : 
            elems=heure.split(':') 
            h=int(elems[0])
            if h == 24 :
                heure="00"+heure[2:]
            if heure == liste_horaires[0] :
                heure_prec=heure
            elif heure_prec != heure and h >= 7 and h <= 18 :
                intervalles.append(durée(heure_prec,heure).seconds)
                heure_prec=heure
    elif len(liste_horaires) == 1 : #Une seule mission par jour
        intervalles=[24.0*60*60]
    nb_intervalles=len(intervalles) 
    if nb_intervalles == 0 :
        frequence = 0.0 
    else :
        frequence=sum(intervalles)/nb_intervalles
        frequence=frequence/60 
    route_to_freq[route]=frequence 
    sortie_frequence.write(route+';'+str(frequence)+'\n')
    
sortie_frequence.close()

sortie_stops=open(repertoire_sorties+'stops_to_routes_GTFS.csv','w')

with open(repertoire_GTFS+"stops.txt") as stops : 
    next(stops)
    sortie_stops.write("stop_id;lat;lon;mode;stop_name;routes"+'\n') 
    for ligne in stops :
        data=ligne.strip().split(',') 
        stop_id=data[0] 
        stop_code=data[1] 
        stop_name=data[2] 
        stop_lat=data[4]
        stop_lon=data[5]

        try : 
            liste_routes=stops_to_routes[stop_id]
        except KeyError : liste_routes=[]

        mode='NC'
        for route in liste_routes :
            route_id=route.split(',')[0] 
            route_type=routes_id_to_types[route_id] 
            if mode == 'NC' :
                mode = route_type
            elif int(mode) > int(route_type) :
                print("/!\ Plusieurs modes pour l'arrêt : "+stop_name) 
                print(" Priorité au mode le plus lourd : "+route_type) 
                mode = route_type
            elif mode == route_type : 
                mode = route_type
        
        routes=str(liste_routes).strip() 
        routes=routes.strip('[').strip(']')
        routes=routes.replace("'",'')

        sortie_stops.write(stop_id+';'+stop_lat+';'+stop_lon+';'+mode+';'+ stop_name+';'+routes+'\n')
    sortie_stops.close()
   
   #On ajoute les arrêts revérifiés à la main
    with open(repertoire_data_modifiee+'Arrets_ILEVIA.csv','r') as arrets_verifies :
        next(arrets_verifies)
        for ligne in arrets_verifies :
            data=ligne.strip().split(';') 
            stop_id = data[0]
            routes = data[-1]
            elem_type = 'route' 
            liste_routes = []
            for elem in routes.split(',') :
                elem=elem.strip()
                if elem_type == 'route' :
                    elem_route = elem
                    elem_type = 'sens' 
                elif elem_type == 'sens' :
                    route = elem_route +','+ elem 
                    liste_routes.append(route) 
                    elem_type = 'route'

            if len(liste_routes) > 0 :
                if stop_id not in stops_to_routes :
                    stops_to_routes[stop_id] = liste_routes 
                else :
                    known_routes = stops_to_routes[stop_id] 
                    for route in liste_routes :
                        if route not in known_routes : 
                            stops_to_routes[stop_id].append(route)

print(" ----- ")
#%% CALCUL DU PTAL
print("PHASE DE CALCUL DU PTAL")
repertoire_donnees=repertoire+'\\Data modifiée\\' 

v_map=1.1 #m/s

types_to_accessibility={} #en mètres 
types_to_accessibility['3']=300.0 #Bus 
types_to_accessibility['0']=600.0 #Tramway ou métro léger 
types_to_accessibility['1']=900.0 #Métro

types_to_fiability={} #en minutes 
types_to_fiability['3']=2.0 #Bus 
types_to_fiability['0']=1.0 #Tramway ou métro léger 
types_to_fiability['1']=0.5 #Métro

def calcul_EDF(dist,route_type,freq,v_map=1.1) : 
    accessibility = types_to_accessibility[route_type] 
    fiability = types_to_fiability[route_type]
    
    if dist <= accessibility : #On vérifie que le service est bien accessible S
        AP=(dist/v_map)/60 #Calcul du Service Access Point en min 
        SWT=0.5*freq #Calcul du Scheduled Waiting Time
        AWT=fiability #Calcul du Average Waiting Time
        TAT=SAP+SWT+AWT #Calcul du Total Access Time
        EDF=30/TAT #Calcul du Equivalent Door Frequency 
    else:
        EDF=0.0 #On choisit une valeur par défaut si le service n'est pas accessible
    return EDF
    
for proj in projets_calcules :
    #Extraction des détails du projet calculé 
    if proj == []:
        test_projet=0 
        mode_projet='' 
        nom_projet='' 
        freq_projet=0.0
        else: 
            test_projet=1
            mode_projet=proj[0] 
            nom_projet=proj[1] 
            freq_projet=proj[2]

        #Initialisation des dictionnaires de calcul 
        ID_to_AI_bus={}
        ID_to_AI_tram={}
        ID_to_AI_metro={}
        ID_to_AI_autres={}
        centroides_vus=set()
        #Obtention de la liste des EDF pour le projet seul 
        if test_projet :
            ID_to_AI_projet={}
            ID_to_liste_EDF={}
            with open(repertoire_donnees + 'distArrets_'+nom_projet+'.csv','r') as dist_projet :
                next(dist_projet) 
                liste_EDF_projet=[] 
                ID_old=0
                for ligne in dist_projet :
                    data=ligne.strip().split(',') 
                    centroide=data[0] 
                    stop_id=data[1] 
                    distance=float(data[2])

                    if ID_old == 0 : 
                        liste_EDF_projet=[]
                    elif ID_old != centroide : 
                        ID_to_liste_EDF[ID_old]=liste_EDF_projet 
                        liste_EDF_projet=[]

                    route_type=mode_projet
                    freq=freq_projet 
                    EDF=calcul_EDF(distance,route_type,freq) 
                    liste_EDF_projet.append(EDF)

                    ID_old = centroide 
                    
        #Calcul de l'AI pour chaque centroïde
        with open(repertoire_donnees + 'dist_ilevia.csv','r') as dist_ilevia : 
            next(dist_ilevia)
            liste_EDF_bus=[]
    liste_EDF_tram=[]
    liste_EDF_metro=[] 
    liste_EDF_autres=[] 
    ID_old=0 unknown_routes=set()
    for ligne in dist_ilevia :
        data=ligne.strip().split(',') 
        centroide=data[0] 
        stop_id=data[1] 
        distance=float(data[2]) 
        ID_new=centroide

        try : 
            liste_routes=stops_to_routes[stop_id]
        except KeyError : 
            liste_routes=[]

        if ID_old==0: #On exclut le cas de la première itération 
            liste_EDF_bus=[]
            liste_EDF_tram=[]
            liste_EDF_metro=[]
            liste_EDF_autres=[]
        elif ID_new != ID_old : #Si on change de centroïde
            #On agrége les listes d'EDF pour chaque mode dans un seul objet 
            listes_EDF=[liste_EDF_bus,liste_EDF_tram,liste_EDF_metro,liste_EDF_autres] 
            modes=['3','0','1','NC']
            #On vérifie s'il y a un projet
            if test_projet :
                #Si oui on essaye d'aller chercher la liste d'EDF pour le centroide 
                try :
                    liste_EDF_projet=ID_to_liste_EDF[ID_old] 
                except KeyError :
                    liste_EDF_projet=[] #Sinon elle est prise comme vide
                #On ajoute la liste des EDF du projet aux autres listes d'EDF 
                listes_EDF.append(liste_EDF_projet) 
                modes.append(mode_projet)
            #On parcourt cet unique objet pour le centroïde 
            index=0
            for liste_EDF_mode in listes_EDF :
                index=listes_EDF.index(liste_EDF_mode,index)
                #Si on est sur le mode en projet mais pas sur le projet lui-même 
                if modes[index] == mode_projet and index + 1 < len(listes_EDF) :
                    #On ajoute la liste d'EDF du mode à la liste d'EDF du projet
                    listes_EDF[-1]+=liste_EDF_mode
                #On vérifie que chaque élément est non-nul... 
                if len(liste_EDF_mode) > 0 :
                    #On calcule l'EDF maximal pour chaque mode 
                    maxi_EDF_mode=max(liste_EDF_mode)
                    #On en déduit l'Accessibility Index [AI] pour chaque mode
                    AI_mode_ID = maxi_EDF_mode + 0.5*(sum(liste_EDF_mode) - maxi_EDF_mode)
                else : #...sinon on lui donne une valeur par défaut 
                    AI_mode_ID = 0.0
                #On affecte ensuite au centroïde l'AI correspondant au mode

                if index == 0 : 
                    ID_to_AI_bus[ID_old]=AI_mode_ID
                elif index == 1 : 
                    ID_to_AI_tram[ID_old]=AI_mode_ID
                elif index == 2 : 
                    ID_to_AI_metro[ID_old]=AI_mode_ID
                elif index == 3 : 
                    ID_to_AI_autres[ID_old]=AI_mode_ID
                elif test_projet and index == 4 : 
                    ID_to_AI_projet[ID_old]=AI_mode_ID
            #On réinitialise ensuite la liste des EDF pour chaque mode 
            liste_EDF_bus=[]
            liste_EDF_tram=[]
            liste_EDF_metro=[]
            liste_EDF_autres=[]
        #On parcourt la liste des routes passant à cet arrêt 
        for route in liste_routes :
            route_id=route.split(',')[0] 
            route_type=routes_id_to_types[route_id] 
            try :
                freq=route_to_freq[route] 
            except KeyError :
                if route_id in routes_dateref :
                    if route not in unknown_routes :
                        print("/!\ La route "+route+" n'a pas de fréquence associée") 
                        print(" Fréquence associée par défaut : 0.0") 
                        unknown_routes.add(route)
                    freq=0.0
            #Pour chaque route on construit l'Equivalent Door Frequency [EDF]
            EDF=calcul_EDF(distance,route_type,freq)
            #Que l'on garde en mémoire pour le centroïde suivant le mode 
            if route_type == '3' : #La ligne est un bus
                liste_EDF_bus.append(EDF)
            elif route_type == '0' : #La ligne est un tram
                liste_EDF_tram.append(EDF)
            elif route_type == '1' : #La ligne est un métro
                liste_EDF_metro.append(EDF) 
            else : #Le mode n'est pas référencé
                liste_EDF_autres.append(EDF)
                print("Mode non référencé : "+route_type) 
                print("EDF = "+str(EDF))
                
        if centroide not in centroides_vus : 
            centroides_vus.add(centroide)
        ID_old=ID_new #On garde en mémoire le dernier centroïde traité
        
    fichier_sortie=open(repertoire_sorties+'AI_projet_'+nom_projet+'_'+mode_projet+'.csv','w')
        fichier_sortie.write("ID;AI;AI_"+nom_projet+'\n')
        for ID in centroides_vus :
            try :
                AI_bus = ID_to_AI_bus[ID]
            except KeyError : 
                AI_bus = 0.0
            try :
                AI_tram = ID_to_AI_tram[ID]
            except KeyError : 
                AI_tram = 0.0
            try :
                AI_metro = ID_to_AI_metro[ID]
            except KeyError : 
                AI_metro = 0.0
            try :
                AI_autres = ID_to_AI_autres[ID]
            except KeyError : 
                AI_autres = 0.0
            try:
                AI_proj = ID_to_AI_projet[ID]
            except KeyError : 
                AI_proj = 0.0
            liste_AI=[AI_bus,AI_tram,AI_metro,AI_autres,AI_proj] 
            modes=['3','0','1','NC']
            AI=0.0
            AI_projet=0.0
            for mod in modes : 
                index=modes.index(mod) 
                if mod == mode_projet :
                    AI+=liste_AI[index]
                    AI_projet+=liste_AI[-1] 
                    else :
                        AI+=liste_AI[index] 
                        AI_projet+=liste_AI[index]
  
            fichier_sortie.write(ID+';'+str(AI)+';'+str(AI_projet)+'\n') 
            
        fichier_sortie.close()
        print(" * L'AI a bien été calculé pour le projet "+nom_projet+' ; '+mode_projet) 
        print("   Les résultats sont disponibles dans le fichier : ")
        print("   "+repertoire_sorties+'AI_projet_'+nom_projet+'_'+mode_projet+'.csv')
        
print(" ----- ")
fin_calcul=time.time()
temps_calcul=str(round(fin_calcul-debut_calcul))
print(temps_calcul+" sec de calculs pour "+str(len(projets_calcules))+" projets calculés")
